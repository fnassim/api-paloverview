// Generated by CoffeeScript 1.3.3
var EventStream, qs, request,
  __slice = [].slice;

request = require('request');

qs = require('querystring');

EventStream = require('eventsource');

exports.Datomic = (function() {
  var get, is_object, parse_opts;

  function Datomic(server, port, alias, name) {
    this.name = name;
    this.root = "http://" + server + ":" + port + "/";
    this.db_alias = alias + '/' + name;
    this.db_uri = "" + this.root + "data/" + this.db_alias + "/";
  }

  Datomic.prototype.createDatabase = function(done) {
    var opts;
    opts = {
      uri: "" + this.root + "data/db/",
      form: {
        'db-name': this.name
      }
    };
    return request.post(opts, function(err, res, body) {
      return done(err, res.statusCode === 201);
    });
  };

  Datomic.prototype.db = function(done) {
    return get(this.db_uri + '-/', done);
  };

  Datomic.prototype.transact = function(data, done) {
    var opts;
    opts = {
      uri: this.db_uri,
      headers: {
        accept: 'application/edn'
      },
      form: {
        'tx-data': data
      }
    };
    return request.post(opts, function(err, res, body) {
      return done(err, body);
    });
  };

  Datomic.prototype.datoms = function() {
    var done, index, opts, _i;
    index = arguments[0], opts = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), done = arguments[_i++];
    opts = parse_opts(opts);
    opts.index = index;
    return get("" + this.db_uri + "-/datoms?" + (qs.stringify(opts)), done);
  };

  Datomic.prototype.indexRange = function() {
    var attrid, done, opts, _i, _ref;
    attrid = arguments[0], opts = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), done = arguments[_i++];
    opts = parse_opts(opts);
    opts.a = attrid;
    if ((_ref = opts.index) == null) {
      opts.index = 'aevt';
    }
    return get("" + this.db_uri + "-/datoms?" + (qs.stringify(opts)), done);
  };

  Datomic.prototype.entity = function() {
    var done, eid, opts, _i;
    eid = arguments[0], opts = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), done = arguments[_i++];
    if (is_object(eid)) {
      opts = eid;
    } else {
      opts = parse_opts(opts);
      opts.e = eid;
    }
    return get("" + this.db_uri + "-/entity?" + (qs.stringify(opts)), done);
  };

  Datomic.prototype.q = function() {
    var done, opts, query, _i;
    query = arguments[0], opts = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), done = arguments[_i++];
    opts = parse_opts(opts);
    opts.q = query;
    opts.args = "[{:db/alias " + this.db_alias + "}]";
    return get("" + this.root + "api/query?" + (qs.stringify(opts)), done);
  };

  Datomic.prototype.events = function() {
    return new EventStream("" + this.root + "events/" + this.db_alias);
  };

  get = function(uri, done) {
    var opts;
    opts = {
      uri: uri,
      headers: {
        accept: 'application/edn'
      }
    };
    return request(opts, function(err, res, body) {
      return done(err, body);
    });
  };

  parse_opts = function(opts) {
    if (opts.length === 1) {
      return opts[0];
    } else {
      return {};
    }
  };

  is_object = function(obj) {
    return obj === Object(obj);
  };

  return Datomic;

})();
